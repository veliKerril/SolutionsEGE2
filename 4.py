F = open('26.txt')
N = int(F.readline())

list = []

for i in range(N):
    # Считываем все данные в список
    list.append(int(F.readline()))

# Сортируем их от меньшего к большему
list.sort()

'''
Наша дальнейшая задача - определить границу в списке между файлами,
слева от которой файлы будут храниться не в сжатом виде,
справа - в сжатом. Именно при таком подходе получится добиться желаемого результата:
получить как можно больше файлов в несжатом виде
'''

# Определим верхнюю и нижнюю границы объема архива
sup = 0.9 * sum(list)
inf = 0.8 * sum(list)

# Непосредственно алгоритм нахождения границы
'''
По сути, в inf у нас хранится объем архива, если бы
все файлы в нем были сжаты. В каждой иттерации цикла мы будем
изменять размер очередного файла с сжатого до обыкновенного, тем самым
найдя нашу границу.
'''
i = 0
while inf <= sup:
    inf += 0.2 * list[i]
    i += 1
# Вычитаем единицу, так как в последней иттерации прибавили лишнюю
i -= 1
# Таким образом в inf сейчас хранится объем, который на объем одного файла
# переполняет  верхнюю границу

# Вот и граница
# Индексация списка начинается с нуля, а i-тый файл
# переполняет нашу границу, поэтому мы имеет ровно i несжатых файлов.
count = i

# На последней иттерации цикла мы прибавили лишний файл,
# который и переполнил верхний объем, сделаем его обратно сжатым
inf -= 0.2 * list[i]

'''
Теперь найдем максимальный размер файла, который при уже найденном количестве несжатых
файлов можно сохранить без сжатия. Сделаем максимальный несжатый элемент сжатым,
и заменим его по возможности более объмным файлом
'''
inf -= 0.2 * list[i - 1]
while i < len(list) and inf + 0.2 * list[i] <= sup:
    i += 1

# Выведем ответ
print(count, list[i - 1])

F.close()
